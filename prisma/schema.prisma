generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id             Int        @id @default(autoincrement())
  name           String     @unique
  recipes        Recipe[]
  image          String?
  parentId       Int?
  parentCategory Category?  @relation("SubCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories  Category[] @relation("SubCategory")

  @@index([parentId])
}

model Recipe {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  description String
  ingredients Ingredient[]
  preparation String
  advises     String?
  image       String?
  categoryId  Int
  category    Category     @relation(fields: [categoryId], references: [id])
  createdAt   DateTime     @default(now())
  lastUpdate  DateTime     @updatedAt
  reviews     Review[]

  @@index([categoryId])
}

model DietType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

// model DietOnProduct {
//   dietType   DietType @relation(fields: [dietTypeId], references: [id])
//   dietTypeId Int
//   product    Product  @relation(fields: [productId], references: [id])
//   productId  Int

//   @@id([dietTypeId, productId])
//   @@index([dietTypeId])
//   @@index([productId])
// }

model Product {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  ingredients Ingredient[]
  dietType    DietType[]
}

model Ingredient {
  id        Int     @id @default(autoincrement())
  amount    Int
  unit      Unit    @relation(fields: [unitId], references: [id])
  unitId    Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@index([recipeId])
  @@index([productId])
  @@index([unitId])
}

model Unit {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  Ingredient Ingredient[]
}

model Reviewer {
  id      Int      @id @default(autoincrement())
  nick    String
  email   String   @unique
  Reviews Review[]
}

model Review {
  id         Int      @id @default(autoincrement())
  text       String
  rating     Int
  reviewerId Int
  reviewer   Reviewer @relation(fields: [reviewerId], references: [id])
  recipeId   Int
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@index([reviewerId])
  @@index([recipeId])
}
